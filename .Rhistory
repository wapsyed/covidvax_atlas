step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_corr(all_predictors(),threshold = 0.5) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
juiced
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_corr(all_predictors(),threshold = 0.5) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
juiced <- juice(base_rec)
juiced
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_corr(all_predictors(),threshold = 0.5) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
base_rec <- prep(base_rec)
juiced <- juice(base_rec)
juiced <- juice(base_rec)
juiced
ann_vaccines_samples_filtered
df_input
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes())
base_rec <- prep(base_rec)
juiced <- juice(base_rec)
juiced
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
juiced <- juice(base_rec)
juiced
regularized_spec <-
linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
chi_models <-
workflow_set(
preproc = list(simple = base_rec),
models = list(rf = rf_spec,
glmnet = regularized_spec,
cart = cart_spec,
knn = knn_spec),
cross = TRUE
)
data_annotation
df = degs_covid_vax %>%
select(condition, genes, regulation_numeric) %>%
distinct() %>%
pivot_wider(names_from = genes,
values_from = regulation_numeric,
values_fn = mean) %>%
inner_join(data_annotation, by = "condition")
## Vaccination types
outcomevar = "type"
ann_vaccines_samples_filtered = df %>%
mutate(outcomevar = type) %>%
select(-type)
ann_vaccines_samples_filtered
data_annotation
ann_vaccines_samples_filtered = df %>%
mutate(outcomevar = type) %>%
select(-type) %>%
select(condition, type, target_pathogen_disease_day, everything())
ann_vaccines_samples_filtered = df %>%
mutate(outcomevar = type) %>%
select(-type) %>%
select(condition, outcomevar, target_pathogen_disease_day, everything())
df = degs_covid_vax %>%
select(condition, genes, regulation_numeric) %>%
distinct() %>%
pivot_wider(names_from = genes,
values_from = regulation_numeric,
values_fn = mean) %>%
inner_join(data_annotation, by = "condition")
## Vaccination types
outcomevar = "type"
ann_vaccines_samples_filtered = df %>%
mutate(outcomevar = type) %>%
select(-type) %>%
select(condition, outcomevar, target_pathogen_disease_day, everything())
ann_vaccines_samples_filtered = df %>%
mutate(outcomevar = type) %>%
select(-type) %>%
select(condition, outcomevar, target_pathogen_disease, day, everything())
#How many samples by level?
count_levels = ann_vaccines_samples_filtered %>%
count(outcomevar)
count_levels
#How many levels?
levels = nrow(count_levels)
ann_vaccines_samples_filtered
ann_vaccines_samples_filtered = df %>%
mutate(outcomevar = type) %>%
select(-type) %>%
select(outcomevar, condition,target_pathogen_disease, day, everything())
#How many samples by level?
count_levels = ann_vaccines_samples_filtered %>%
count(outcomevar)
count_levels
#How many levels?
levels = nrow(count_levels)
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
replace(is.na(.), 0)
glimpse(df_input)
# Split data
set.seed(123)
split <- initial_split(df_input, prop = 0.7, strata = outcomevar)
trees_train <- training(split)
trees_test <- testing(split)
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_interact(~ all_nominal_predictors():all_nominal_predictors()) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
juiced <- juice(base_rec)
juiced
juiced %>%
glimpse()
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_interact(~ all_nominal_predictors():all_nominal_predictors()) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_interact(~ all_nominal_predictors():all_nominal_predictors()) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day) %>% fct_relevel(day, order(day)))
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day) %>% fct_relevel(order(levels(day)))) %>%
replace(is.na(.), 0)
ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor)
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day),
day = fct_relevel(order(levels(day)))) %>%
replace(is.na(.), 0)
day = fct_relevel(order(levels(day))) %>%
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day),
day = fct_relevel(order(levels(day)))) %>%
replace(is.na(.), 0)
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day) %>% fct_relevel(order(as.numeric(as.character(day))))) %>%
replace(is.na(.), 0)
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day) %>% fct_relevel(order(as.numeric(day)))) %>%
replace(is.na(.), 0)
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day) %>% fct_relevel(order(day))) %>%
replace(is.na(.), 0)
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day) %>% fct_relevel(day, -day)) %>%
replace(is.na(.), 0)
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day),
day = factor(day, levels = levels(day))) %>%
replace(is.na(.), 0)
View(df_input)
View(df_input)
day = fct_relevel(day, -day) %>%
day = fct_relevel(day, -day)_ %>%
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day),
day = fct_relevel(day, -day)) %>%
replace(is.na(.), 0)
df_input
glimpse(df_input)
levels(df_input$day)
glimpse(df_input)
# Split data
set.seed(123)
split <- initial_split(df_input, prop = 0.7, strata = outcomevar)
trees_train <- training(split)
trees_test <- testing(split)
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_interact(~ all_nominal_predictors():all_nominal_predictors()) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_interact(~ all_nominal_predictors():all_nominal_predictors())
base_rec <- prep(base_rec)
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes())
base_rec <- prep(base_rec)
juiced <- juice(base_rec)
juiced %>%
glimpse()
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
juiced <- juice(base_rec)
juiced %>%
glimpse()
trees_train
data_annotation
ann_vaccines_samples_filtered = df %>%
mutate(outcomevar = type) %>%
select(-type) %>%
select(outcomevar, condition, day, everything())
#How many samples by level?
count_levels = ann_vaccines_samples_filtered %>%
count(outcomevar)
count_levels
#How many levels?
levels = nrow(count_levels)
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day),
day = fct_relevel(day, -day)) %>%
replace(is.na(.), 0)
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day),
day = fct_relevel(day, -day)) %>%
replace(is.na(.), 0)
glimpse(df_input)
# Split data
set.seed(123)
split <- initial_split(df_input, prop = 0.7, strata = outcomevar)
trees_train <- training(split)
trees_test <- testing(split)
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
juiced <- juice(base_rec)
juiced %>%
glimpse()
ann_vaccines_samples_filtered = df %>%
mutate(outcomevar = type) %>%
select(-type) %>%
select(outcomevar, condition, day, everything())
#How many samples by level?
count_levels = ann_vaccines_samples_filtered %>%
count(outcomevar)
count_levels
#How many levels?
levels = nrow(count_levels)
ann_vaccines_samples_filtered
# Prepare data ------
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day),
day = fct_relevel(day, -day)) %>%
replace(is.na(.), 0)
glimpse(df_input)
# Split data
set.seed(123)
split <- initial_split(df_input, prop = 0.7, strata = outcomevar)
trees_train <- training(split)
trees_test <- testing(split)
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
juiced <- juice(base_rec)
juiced %>%
glimpse()
ann_vaccines_samples_filtered = df %>%
mutate(outcomevar = type) %>%
select(-type, - target_pathogen_disease) %>%
select(outcomevar, condition, day, everything())
#How many samples by level?
count_levels = ann_vaccines_samples_filtered %>%
count(outcomevar)
count_levels
#How many levels?
levels = nrow(count_levels)
# Prepare data ------
df_input <- ann_vaccines_samples_filtered %>%
distinct() %>%
column_to_rownames("condition") %>%
mutate_if(is.character, factor) %>%
mutate(day = as.factor(day),
day = fct_relevel(day, -day)) %>%
replace(is.na(.), 0)
glimpse(df_input)
# Split data
set.seed(123)
split <- initial_split(df_input, prop = 0.7, strata = outcomevar)
trees_train <- training(split)
trees_test <- testing(split)
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_upsample(outcomevar)
base_rec <- prep(base_rec)
juiced <- juice(base_rec)
juiced %>%
glimpse()
regularized_spec <-
linear_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet")
cart_spec <-
decision_tree(cost_complexity = tune(), min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
knn_spec <-
nearest_neighbor(neighbors = tune(), weight_func = tune()) %>%
set_engine("kknn") %>%
set_mode("classification")
rf_spec <- rand_forest(
mtry = tune(),
trees = tune(),
min_n = tune()
) %>%
set_mode("classification") %>%
set_engine("ranger")
chi_models <-
workflow_set(
preproc = list(simple = base_rec),
models = list(rf = rf_spec,
glmnet = regularized_spec,
cart = cart_spec,
knn = knn_spec),
cross = TRUE
)
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_upsample(outcomevar) %>%
# remove any columns with a single unique value
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
filter_rec <-
base_rec %>%
step_corr(all_numeric_predictors(), threshold = tune())
pca_rec <-
base_rec %>%
step_pca(all_numeric_predictors(), num_comp = tune()) %>%
step_normalize(all_numeric_predictors())
chi_models <-
workflow_set(
preproc = list(simple = base_rec,
filter = filter_rec,
pca = pca_rec),
models = list(rf = rf_spec,
glmnet = regularized_spec,
cart = cart_spec,
knn = knn_spec),
cross = TRUE
)
#Remove pca and filter
chi_models <-
chi_models %>%
anti_join(tibble(wflow_id = c("pca_glmnet",
"filter_glmnet")),
by = "wflow_id")
set.seed(123)
chi_models <-
chi_models %>%
# The first argument is a function name from the {{tune}} package
# such as `tune_grid()`, `fit_resamples()`, etc.
workflow_map("tune_grid", resamples = splits, grid = 10,
metrics = metric_set(mae), verbose = TRUE)
chi_models <-
chi_models %>%
# The first argument is a function name from the {{tune}} package
# such as `tune_grid()`, `fit_resamples()`, etc.
workflow_map("tune_grid", resamples = trees_folds, grid = 10,
metrics = metric_set(mae), verbose = TRUE)
autoplot(chi_models)
# install.packages("randomForest")
# install.packages("caret")
# install.packages("rpart")
# install.packages("rpart.plot")
# install.packages("tidymodels")
# install.packages("reticulate")
# install.packages("themis")
# install.packages("ranger")
# install.packages("workflowsets")
install.packages("glmnet")
install.packages("kknn")
library("glmnet")
library("kknn")
chi_models <-
chi_models %>%
# The first argument is a function name from the {{tune}} package
# such as `tune_grid()`, `fit_resamples()`, etc.
workflow_map("tune_grid", resamples = trees_folds, grid = 10,
metrics = metric_set(accuracy), verbose = TRUE)
# Create recipe
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_upsample(outcomevar)
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_upsample(outcomevar)
# Definir os modelos
glm_model <- logistic_reg() %>%
set_engine("glm")
library(nnet)
install.packages("nnet")
install.packages("nnet")
base_rec <- recipe(outcomevar ~ ., data = trees_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_upsample(outcomevar)
# Definir os modelos
glm_model <- logistic_reg() %>%
set_engine("glm")
rf_model <- rand_forest(trees = tune(),
min_n = tune(),
mtry = tune()) %>%
set_engine("ranger") %>%
set_mode("classification")
tree_model <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification")
knn_model <- nearest_neighbor(neighbors = tune()) %>%
set_engine("kknn") %>%
set_mode("classification")
nn_model <- mlp(hidden_units = tune(), penalty = tune()) %>%
set_engine("nnet") %>%
set_mode("classification")
# Criar os workflows
glm_wf <- workflow() %>%
add_model(glm_model) %>%
add_recipe(base_rec)
rf_wf <- workflow() %>%
add_model(rf_model) %>%
add_recipe(base_rec)
tree_wf <- workflow() %>%
add_model(tree_model) %>%
add_recipe(base_rec)
knn_wf <- workflow() %>%
add_model(knn_model) %>%
add_recipe(base_rec)
nn_wf <- workflow() %>%
add_model(nn_model) %>%
add_recipe(base_rec)
# Criar o conjunto de workflows
wf_set <- workflow_set(
preproc = list(base_rec),
models = list(glm = glm_model, rf = rf_model, tree = tree_model, knn = knn_model, nn = nn_model)
)
cv_folds <- vfold_cv(trees_train)
wf_results <- wf_set %>%
workflow_map(
"tune_grid",
resamples = cv_folds,
grid = 10,
control = control_grid(save_pred = TRUE, parallel_over = "everything")
)
wf_metrics <- wf_results %>%
collect_metrics()
wf_metrics %>%
filter(.metric == "accuracy") %>%
ggplot(aes(x = wflow_id, y = mean, fill = wflow_id)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Comparação de Modelos", y = "Acurácia Média", x = "Modelo") +
theme_minimal()
