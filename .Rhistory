select(1:1) %>%                  # Selecionar as primeiras 5 colunas
as.matrix()
corplot_dim1 = {corrplot(var_ordenado_top20_dim1,
is.corr = T, tl.col = 'black',
tl.cex = 0.5,
addCoef.col = 'white',
number.cex = 0.4,
cl.pos = 'n',
col = COL1('Blues'),
col.lim = c(min(var_ordenado_top20_dim1), max(var_ordenado_top20_dim1)))  ;
# Call the recordPlot() function to record the plot
recordPlot()
}
#Comp2
var_ordenado_top20_dim2 <- var$contrib %>%
as.data.frame() %>%
arrange(desc(.[, 2])) %>%   # Ordenar pela primeira coluna em ordem decrescente
slice_head(n = 20) %>%      # Selecionar as primeiras 50 linhas
select(2) %>%                  # Selecionar as primeiras 5 colunas
as.matrix()
corplot_dim2 = {corrplot(var_ordenado_top20_dim2,
is.corr = T,
tl.col = 'black',
tl.cex = 0.5,
addCoef.col = 'white',
number.cex = 0.4,
cl.pos = 'n',
col = COL2('PiYG'),
col.lim = c(min(var_ordenado_top20_dim2), max(var_ordenado_top20_dim2))) ;
# Call the recordPlot() function to record the plot
recordPlot()
}
dim1_dim2_corrplot = plot_grid(corplot_dim1, corplot_dim2,
rel_widths = c(1, 0.5, 1),
align = "hv",
labels = c("Dim1", "Dim2"),
nrow = 1)
dim1_dim2_corrplot
#########Scree plot
data.pca = prcomp(corr_matrix) #PCA
summary(corr_matrix) #Retornar PCs
#########Scree plot
scree_plot = fviz_eig(data.pca,
addlabels = TRUE,
ylim = c(0, 70)) +
geom_col(color = "#00AFBB", fill = "#00AFBB") +
theme_classic()
scree_plot
############### KNN classification
#Use the screeplot generated % of explained variance for each dimension
scree_plot #Dim 1 = 66.8%, Dim 2 = 15.7%
# PC1-PC2 ------
#Determinar o número de clusters para KNN
pca_scores <- data.frame(pca_res$x[, 1:2])
fviz_nbclust(pca_scores,
FUNcluster = kmeans,
method = "wss")
############### KNN classification
#Use the screeplot generated % of explained variance for each dimension
scree_plot #Dim 1 = 66.8%, Dim 2 = 15.7%
# PC1-PC2 ------
#Determinar o número de clusters para KNN
pca_scores <- data.frame(pca_res$x[, 1:2])
fviz_nbclust(pca_scores,
FUNcluster = kmeans,
method = "wss")
pcas = "PC1-PC2"
set.seed(666)                             # Set seed for randomization
cluster_model <- kmeans(pca_res$x[, 1:2], centers = 3)  # Ajuste o número de clusters conforme necessário
ann_vaccines_pca_matrix$cluster <- as.factor(cluster_model$cluster)
# Condition -------
pca_plot_knn_condition_lab = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'condition')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.1,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
# xlab("PC1 (66.8%)") +
# ylab("PC2 (15.7%)") +
scale_color_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 2)
condition_col = c(
"BBIBP (V3, D07)" = "gray50",
"BBIBP (V3, D14)" = "gray50",
"BBIBP (V3, D28)" = "gray50",
"BNT (V1, D6)" = "#56cfe1",
"BNT (V2, D1)" = "#56cfe1",
"BNT (V3, D1)" = "#56cfe1",
"BNT-I (D1)"= "#BF3100",
"BNT-I (D10, mild)"= "#BF3100",
"BNT-I (D10, severe)"= "#BF3100",
"BNT-I (D2)"= "#BF3100",
"BNT-I (D26, mild)"= "#BF3100",
"BNT-I (D26, severe)"= "#BF3100",
"BNT-I (D3)"= "#BF3100",
"BNT-I (D4)"= "#BF3100",
"BNT-I (D51, severe)"= "#BF3100",
"BNT-I-BNT (D51, mild)"= "#F5BB00",
"BNT-I-BNT (D51, severe)"= "#F5BB00",
"BNT-MO (V1, D6)"= "#D7B0EE",
"BNT-MO (V3, D1)"= "#D7B0EE",
"ChAd (V1, D3)"= "#5e60ce",
"ChAd (V1, D6)"= "#5e60ce",
"ChAd (V1, D7)"= "#5e60ce",
"ChAd (V2, D1)"= "#5e60ce",
"ChAd (V2, D3)"= "#5e60ce",
"ChAd (V2, D7)"= "#5e60ce",
"ChAd-BNT (V2, D0)"= "#7400b8",
"ChAd-BNT (V2, D3)"= "#7400b8",
"ChAd-BNT (V2, D7)"= "#7400b8",
"ChAd-BNT (V3, D1)"= "#7400b8",
"I (D1)"= "#ff4d6d",
"I (D10, moderate)"= "#ff4d6d",
"I (D10, severe)"= "#ff4d6d",
"I (D26, moderate)"= "#ff4d6d",
"I (D26, severe)"= "#ff4d6d",
"I (D51, moderate)"= "#ff4d6d",
"I (D51, severe)"= "#ff4d6d",
"I-BNT-I (D2)"= "#BF3100",
"I-BNT-I (D5)"= "#BF3100",
"I-I (D0)"= "#ff4d6d",
"I-I (D1)"= "#ff4d6d",
"I-I (D2)"= "#ff4d6d",
"I-I (D3)"= "#ff4d6d",
"I-I (D5)"= "#ff4d6d",
"ZF2001 (V3, D07)"= "#b5179e",
"ZF2001 (V3, D14)"= "#b5179e",
"ZF2001 (V3, D28)" = "#b5179e"
)
# Condition -------
pca_plot_knn_condition_lab = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'condition')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.1,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
# xlab("PC1 (66.8%)") +
# ylab("PC2 (15.7%)") +
scale_color_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 2)
ggsave(pca_plot_knn_condition_lab, file = paste0(filename, pcas, "_KNN_Clustered_labels.png"), width = 7, height = 5)
setwd("C:/Users/Wasim/OneDrive/Área de Trabalho/Github/covidvax_atlas/PCA")
# Clusters, with density plot ------
pca_plot_knn_cluster = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'cluster')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.1,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
# xlab("PC1 (66.8%)") +
# ylab("PC2 (15.7%)") +
scale_color_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 2)
pca_plot_knn_cluster_marginal = ggMarginal(pca_plot_knn_cluster, type = "histogram", groupFill = T, groupColour = T, xparams = list(binwidth = 0.1, size = 0.1), yparams = list(binwidth = 0.1, size = 0.1))
ggsave(pca_plot_knn_cluster_marginal, file = paste0(filename, pcas, "_KNN_Clustered_labels_Density.png"), width = 8, height = 5)
```{r}
# Graph of the variables
options(ggrepel.max.overlaps = Inf)
circle_contrib= fviz_pca_var(pca_res, col.var = "cos2",
gradient.cols = c("black", "#4CC9F0"),
select.var= list(cos2 = 20),
repel = T,
labelsize = 3,
col.circle = NA) +
xlab("") +
ylab("") +
theme_minimal() +
theme(panel.grid = element_blank(),  # Remover linhas de grade
axis.text = element_blank(),   # Remover rótulos de texto dos eixos
axis.ticks = element_blank())
circle_contrib
############### KNN classification
#Use the screeplot generated % of explained variance for each dimension
scree_plot #Dim 1 = 66.8%, Dim 2 = 15.7%
# PC1-PC2 ------
#Determinar o número de clusters para KNN
pca_scores <- data.frame(pca_res$x[, 1:2])
fviz_nbclust(pca_scores,
FUNcluster = kmeans,
method = "wss")
pcas = "PC1-PC2"
set.seed(666)                             # Set seed for randomization
cluster_model <- kmeans(pca_res$x[, 1:2], centers = 3)  # Ajuste o número de clusters conforme necessário
ann_vaccines_pca_matrix$cluster <- as.factor(cluster_model$cluster)
# Condition -------
pca_plot_knn_condition_lab = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'condition')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.1,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
# xlab("PC1 (66.8%)") +
# ylab("PC2 (15.7%)") +
scale_color_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 2)
ggsave(pca_plot_knn_condition_lab, file = paste0(filename, pcas, "_KNN_Clustered_labels.png"), width = 7, height = 5)
# Clusters, with density plot ------
pca_plot_knn_cluster = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'cluster')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.1,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
# xlab("PC1 (66.8%)") +
# ylab("PC2 (15.7%)") +
scale_color_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 2)
pca_plot_knn_cluster_marginal = ggMarginal(pca_plot_knn_cluster, type = "histogram", groupFill = T, groupColour = T, xparams = list(binwidth = 0.1, size = 0.1), yparams = list(binwidth = 0.1, size = 0.1))
ggsave(pca_plot_knn_cluster_marginal, file = paste0(filename, pcas, "_KNN_Clustered_labels_Density.png"), width = 8, height = 5)
# PC2-PC3 ------
#Determinar o número de clusters para KNN
pca_scores <- data.frame(pca_res$x[, 2:3])
pcas = "PC2-PC3"
fviz_nbclust(pca_scores,
FUNcluster = kmeans,
method = "wss")
set.seed(666)                             # Set seed for randomization
cluster_model <- kmeans(pca_res$x[, 2:3], centers = 4)  # Ajuste o número de clusters conforme necessário
ann_vaccines_pca_matrix$cluster <- as.factor(cluster_model$cluster)
# Condition -------
pca_plot_knn_condition_lab = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'condition')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.1,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
# xlab("PC1 (66.8%)") +
# ylab("PC2 (15.7%)") +
scale_color_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 2)
ggsave(pca_plot_knn_condition_lab, file = paste0(filename, pcas, "_KNN_Clustered_labels_PC2_PC3.png"), width = 7, height = 5)
# Clusters, with density plot ------
pca_plot_knn_cluster = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'cluster')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.1,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
# xlab("PC1 (66.8%)") +
# ylab("PC2 (15.7%)") +
scale_color_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#5e60ce",
"2" = "#f72585",
"3" = "#56cfe1",
"4" = "#b5e48c",
"5" = "#ff8c42")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 2)
pca_plot_knn_cluster_marginal = ggMarginal(pca_plot_knn_cluster, type = "histogram", groupFill = T, groupColour = T, xparams = list(binwidth = 0.1, size = 0.1), yparams = list(binwidth = 0.1, size = 0.1))
ggsave(pca_plot_knn_cluster_marginal, file = paste0(filename, pcas, "_KNN_Clustered_labels_Density.png"), width = 8, height = 5)
####### INPUT
PC1 = var$cos2 %>%
as.data.frame() %>%
arrange(desc(Dim.1)) %>%
filter(Dim.1 >= 0.50) %>%
rownames_to_column("genes") %>%
distinct() %>%
select(genes, Dim.1) %>%
mutate(dimension = "PC1")
PC1
PC2 = var$cos2 %>%
as.data.frame() %>%
filter(Dim.2 >= 0.50) %>%
slice_head(n = 20) %>%
rownames_to_column("genes") %>%
distinct() %>%
select(genes, Dim.2) %>%
mutate(dimension = "PC2")
tidy(var)
library(tidyr)
tidy(var)
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
tidy(var)
library(tidymodels)
melt(var)
PC1_2 = bind_rows(PC1, PC2)
PC1_2
####### INPUT
PC1 = var$cos2 %>%
as.data.frame() %>%
arrange(desc(Dim.1)) %>%
filter(Dim.1 >= 0.50) %>%
rownames_to_column("genes") %>%
distinct() %>%
select(genes, cos2 = Dim.1) %>%
mutate(dimension = "PC1")
PC2 = var$cos2 %>%
as.data.frame() %>%
filter(Dim.2 >= 0.50) %>%
slice_head(n = 20) %>%
rownames_to_column("genes") %>%
distinct() %>%
select(genes, cos2 = Dim.2) %>%
mutate(dimension = "PC2")
PC1_2 = bind_rows(PC1, PC2)
PC1_2
PC1_2 %>% write.csv(file = "PC_1_2_cos2.csv", row.names = F)
#Data manipulation
df_random_forest = df_input %>%
rownames_to_column("genes") %>%
inner_join(PC1_2 %>% select(genes) %>% distinct(), by = "genes") %>%
column_to_rownames("genes") %>%
t() %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
inner_join(ann_vaccines_samples %>% select(sample, disease_vac), by = "sample") %>%
select(sample, disease_vac, everything()) %>%
column_to_rownames("sample") %>%
filter(disease_vac != "H",
disease_vac != "Healthy")  %>%
rename_with(~ gsub("-", "", .)) %>%
mutate(disease_vac = if_else(disease_vac == "V", 0, 1))
# Stats
tabyl(df_random_forest$disease_vac)
# Allocate train and test data
sample(1:nrow(df_random_forest), 387) -> train_all # Sample ~70% of total data
df_random_forest[ train_all,] -> all_train # Allocate the 70% to train data
df_random_forest[-train_all,] -> all_test # Allocate the remaining to test data
#Check stats
table(all_train$disease_vac)
table(all_test$disease_vac)
# Control parameters -----
#Sample control by bootstraping
ctrl = trainControl(method = 'cv',
number = 20,
allowParallel = T)
grid = expand.grid(.mtry = c(1:15),
.ntree = c(500,
1500,
2000,
2500))
# Train -----
rfFit = train(disease_vac ~ .,
method = customRF,
tuneGrid = grid,
trControl = ctrl,
metric = 'Accuracy',
data = all_train)
disease_vac
all_train
# Train -----
rfFit = train(factor(disease_vac) ~ .,
method = customRF,
tuneGrid = grid,
trControl = ctrl,
metric = 'Accuracy',
data = all_train)
plot(rfFit)
df_input <- df_input %>%
rownames_to_column("genes") %>%
inner_join(PC1_2 %>% select(genes) %>% distinct(), by = "genes") %>%
column_to_rownames("genes") %>%
t() %>%
as.data.frame() %>%
rownames_to_column("sample") %>%
inner_join(ann_vaccines_samples %>% select(sample, disease_vac), by = "sample") %>%
select(sample, disease_vac, everything()) %>%
column_to_rownames("sample") %>%
filter(disease_vac != "H", disease_vac != "Healthy") %>%
rename_with(~ gsub("-", "", .)) %>%
mutate(disease_vac = if_else(disease_vac == "V", 0, 1))
# Split de dados em treinamento e teste
set.seed(123)  # Para reproduzibilidade
split <- initial_split(df_input, prop = 0.7, strata = "disease_vac")
library(tidymodels)
split <- initial_split(df_input, prop = 0.7, strata = "disease_vac")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
setwd("C:/Users/Wasim/OneDrive/Área de Trabalho/Github/covidvax_atlas")
install.packages("tidymodels")
save.image("C:/Users/Wasim/OneDrive/Área de Trabalho/Github/covidvax_atlas/RNAseq analysis - Wasim - Data.RData")
restart()
