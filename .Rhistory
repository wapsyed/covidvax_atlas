select(!c(Condition)) %>%
arrange(sample) %>%
column_to_rownames("sample") %>%
t() %>%
as.data.frame() %>%
mutate_if(is.character, as.numeric) %>%
as.matrix()
#Annotations ------
#Columns
ann_cols_heatmap = genes_matrix %>%
colnames() %>%
data.frame() %>%
filter(. != "genes") %>%
rename(sample = '.') %>%
inner_join(cond_ann, by = "sample") %>%
distinct() %>%
arrange(sample) %>%
column_to_rownames("sample")
#Reorder and match cols
matrix_data = genes_matrix %>%
t() %>%
as.data.frame() %>%
rownames_to_column(var= "sample") %>%
inner_join(ann_cols_heatmap %>% rownames_to_column("sample"), by = "sample") %>%
select(!c(Condition)) %>%
arrange(sample) %>%
column_to_rownames("sample") %>%
t() %>%
as.data.frame() %>%
mutate_if(is.character, as.numeric) %>%
as.matrix()
matrix_data
#Dimensions (checking)
dim(matrix_data)
#Heatmap annotation
ha = HeatmapAnnotation(df = ann_cols_heatmap,
col = colors_cols,
annotation_name_side = "right")
ann_cols_heatmap
dim(ann_cols_heatmap)
source("~/Desktop/Yohan/HeatmapCounts_1_2_3.R", echo=TRUE)
#Dimensions (checking)
dim(matrix_data)
dim(ann_cols_heatmap)
#Heatmap annotation
ha = HeatmapAnnotation(df = ann_cols_heatmap,
col = colors_cols,
annotation_name_side = "right")
# Values colors
col_fun <- colorRamp2(c( 0, 10), c( "black", "#ed6a5a"))
#Parameters for heatmap
file = filename
mat = matrix_data
width = unit(10, "in")
height = unit(6, "in")
width_image = 10
height_image = 6
column_names_gp = gpar(fontsize = 10)
row_names_gp = gpar(fontsize = 0)
rect_gp = gpar(col = "black", lwd = 0)
fileimageheatmap_grouped = paste0(file, sep ="_", "Complexheatmap.png")
fileimageheatmap_grouped
png(file = fileimageheatmap_grouped,
width = width_image,
height = height_image,
units="in",
res=300)
heatmap_plot = Heatmap(mat,
use_raster = TRUE,
raster_quality = 1,
raster_resize_mat = TRUE,
top_annotation = ha,
show_row_names = TRUE,
row_names_side = "right",
show_heatmap_legend = TRUE,
heatmap_legend_param = list(direction = "vertical"),
col = col_fun, #color
name = "Log2-fold change",
show_column_names = TRUE,
column_title = fileimageheatmap_grouped,
column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 45,
column_names_gp = column_names_gp,
rect_gp = rect_gp,
na_col = "white",
cluster_rows = TRUE,
row_names_gp = row_names_gp,
row_dend_width = unit(3, "cm"),
row_split = NULL,
column_split = 2,
row_gap = unit(2, "mm"),
cluster_columns = TRUE,
column_gap = unit(2, "mm"),
show_column_dend = F,
show_row_dend = F,
row_dend_side = "left",
column_dend_side = "top",
clustering_distance_rows = "euclidean",
border = F,
width = width,
height = height)
heatmap_plot = draw(heatmap_plot,
annotation_legend_side = "left",
heatmap_legend_side = "left")
png(file = fileimageheatmap_grouped,
width = width_image,
height = height_image,
units="in",
res=300)
heatmap_plot = Heatmap(mat,
use_raster = TRUE,
# raster_quality = 1,
raster_resize_mat = TRUE,
top_annotation = ha,
show_row_names = F,
row_names_side = "right",
show_heatmap_legend = TRUE,
heatmap_legend_param = list(direction = "vertical"),
col = col_fun, #color
name = "Log2-fold change",
show_column_names = TRUE,
column_title = fileimageheatmap_grouped,
column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 45,
column_names_gp = column_names_gp,
rect_gp = rect_gp,
na_col = "white",
cluster_rows = TRUE,
row_names_gp = row_names_gp,
row_dend_width = unit(3, "cm"),
row_split = NULL,
column_split = 2,
row_gap = unit(2, "mm"),
cluster_columns = TRUE,
column_gap = unit(2, "mm"),
show_column_dend = F,
show_row_dend = F,
row_dend_side = "left",
column_dend_side = "top",
clustering_distance_rows = "euclidean",
border = F,
width = width,
height = height)
heatmap_plot = draw(heatmap_plot,
annotation_legend_side = "left",
heatmap_legend_side = "left")
install.packages("grDevices")
install.packages("grDevices")
install.packages("cairo")
install.packages("Cairo")
library(Cairo)
install.packages("Cairo", repo="https://RForge.net")
write.csv(countsmatrix, file = "countsmatrix.csv", row.names = F)
library(tidyverse)
library(ggrepel) #load before factoextra
library(factoextra)
library(caret)
library(stats)
library(ggfortify)
library(ggplot2)
library(corrplot)
library(cowplot)
library(ggcorrplot)
library(ComplexHeatmap)
library(circlize)
library(ggExtra)
condition_col = c(
"BBIBP (V3, D07)" = "#00A087FF",
"BBIBP (V3, D14)" = "#00A087FF",
"BBIBP (V3, D28)" = "#00A087FF",
"BNT (V1, D6)" = "#4DBBD5FF",
"BNT (V2, D1)" = "#4DBBD5FF",
"BNT (V3, D1)" = "#4DBBD5FF",
"BNT-I (D1)"= "#DC0000FF",
"BNT-I (D10, mild)"= "#DC0000FF",
"BNT-I (D10, severe)"= "#DC0000FF",
"BNT-I (D2)"= "#DC0000FF",
"BNT-I (D26, mild)"= "#DC0000FF",
"BNT-I (D26, severe)"= "#DC0000FF",
"BNT-I (D3)"= "#DC0000FF",
"BNT-I (D4)"= "#DC0000FF",
"BNT-I (D51, severe)"= "#DC0000FF",
"BNT-I-BNT (D51, mild)"= "#F5BB00",
"BNT-I-BNT (D51, severe)"= "#F5BB00",
"BNT-MO (V1, D6)"= "#72ddf7",
"BNT-MO (V3, D1)"= "#72ddf7",
"ChAd (V1, D3)"= "#3C5488FF",
"ChAd (V1, D6)"= "#3C5488FF",
"ChAd (V1, D7)"= "#3C5488FF",
"ChAd (V2, D1)"= "#3C5488FF",
"ChAd (V2, D3)"= "#3C5488FF",
"ChAd (V2, D7)"= "#3C5488FF",
"ChAd-BNT (V2, D0)"= "#4DBBD5FF",
"ChAd-BNT (V2, D3)"= "#4DBBD5FF",
"ChAd-BNT (V2, D7)"= "#4DBBD5FF",
"ChAd-BNT (V3, D1)"= "#4DBBD5FF",
"I (D1)"= "#DC0000FF",
"I (D10, moderate)"= "#DC0000FF",
"I (D10, severe)"= "#DC0000FF",
"I (D26, moderate)"= "#DC0000FF",
"I (D26, severe)"= "#DC0000FF",
"I (D51, moderate)"= "#DC0000FF",
"I (D51, severe)"= "#DC0000FF",
"I-BNT-I (D2)"= "#DC0000FF",
"I-BNT-I (D5)"= "#DC0000FF",
"I-I (D0)"= "#DC0000FF",
"I-I (D1)"= "#DC0000FF",
"I-I (D2)"= "#DC0000FF",
"I-I (D3)"= "#DC0000FF",
"I-I (D5)"= "#DC0000FF",
"ZF2001 (V3, D07)"= "#8491B4FF",
"ZF2001 (V3, D14)"= "#8491B4FF",
"ZF2001 (V3, D28)" = "#8491B4FF"
)
# Genes in long table format
all_degs_p_05_vac_infected_19_12_23
# Gene set annotation.Used only to merge and filter genes.
ImmuneGO_Annotated_Genes
# Sample or condition annotation
data_annotation = ann_vaccines_19_1_24 %>%
mutate(day = as.factor(day),
dose = as.factor(dose))
# Gene set data.
ImmuneGO_Annotated_Genes_all = ImmuneGO_Annotated_Genes
ImmuneGO_Annotated_Genes = ImmuneGO_Annotated_Genes_all %>%
filter(!process %in% c("TCR REPERTOIRE", "BCR REPERTOIRE"))
ImmuneGO_Genes = all_degs_p_05_vac_infected_19_12_23 %>%
inner_join(ImmuneGO_Annotated_Genes %>%
select(genes, process) %>%
distinct() %>%
select(genes),
by = "genes") %>%
distinct()
# nonImmuneGO_Genes = all_degs_p_05_vac_infected_19_12_23 %>%
#   select(-"...1", -"...12") %>%
#   anti_join(ImmuneGO_Annotated_Genes_all %>%
#                select(genes) %>%
#                distinct(),
#                by = "genes") %>%
#   distinct()
#INPUT
data_genes = ImmuneGO_Genes
filename = "ImmuneGO_Genes"
#Convert long to wide table format.
#Dataframe with sample annotation
ann_vaccines_pca_matrix = data_genes %>%
mutate(log2fold_change = as.numeric(log2fold_change)) %>%
select(condition, genes, log2fold_change) %>%
pivot_wider(., names_from = "condition",
values_from = "log2fold_change") %>%
replace(is.na(.), 0) %>%
column_to_rownames("genes") %>%
t() %>%
as.data.frame() %>%
rownames_to_column("condition") %>%
inner_join(data_annotation %>%
select(condition, disease_vac, vaccine, day, week, dose, infection, type), by = "condition")
# Convert dataframe to matrix without annotation columns
ann_vaccines_pca_matrix_ready = ann_vaccines_pca_matrix %>%
column_to_rownames("condition") %>%
select(!disease_vac:type) %>%
as.matrix()
# Delete columns with near 0 variance
nearZeroVarCols <- nearZeroVar(ann_vaccines_pca_matrix_ready, saveMetrics = TRUE)
# Loadings plot ----
options(ggrepel.max.overlaps = Inf)
circle_contrib= fviz_pca_var(pca_res, col.var = "cos2",
gradient.cols = c("black", "#DC0000FF"),
select.var= list(cos2 = 20),
repel = T,
labelsize = 3,
col.circle = NA) +
xlab("") +
ylab("") +
theme_minimal() +
theme(panel.grid = element_blank(),  # Remover linhas de grade
axis.text = element_blank(),   # Remover rótulos de texto dos eixos
axis.ticks = element_blank())
#Save
ggsave(circle_contrib, file = paste0(filename, "_circle_contrib.png"), width = 5, height = 5)
circle_contrib
circle_contrib= fviz_pca_var(pca_res, col.var = "cos2",
gradient.cols = c("black", "#DC0000FF"),
select.var= list(cos2 = 20),
repel = T,
labelsize = 3,
col.circle = NA) +
xlab("") +
ylab("") +
theme_minimal() +
theme(panel.grid = element_blank(),  # Remover linhas de grade
axis.text = element_blank(),   # Remover rótulos de texto dos eixos
axis.ticks = element_blank())
circle_contrib
#Save
ggsave(circle_contrib, file = paste0(filename, "_circle_contrib_wide.png"), width = 10, height = 5)
circle_contrib= fviz_pca_var(pca_res, col.var = "cos2",
gradient.cols = c("black", "#DC0000FF"),
select.var= list(cos2 = 20),
repel = T,
labelsize = 4,
col.circle = NA) +
xlab("") +
ylab("") +
theme_minimal() +
theme(panel.grid = element_blank(),  # Remover linhas de grade
axis.text = element_blank(),   # Remover rótulos de texto dos eixos
axis.ticks = element_blank())
circle_contrib
#Save
ggsave(circle_contrib, file = paste0(filename, "_circle_contrib_wide.png"), width = 10, height = 5)
#KNN classification -----
#Use the screeplot generated % of explained variance for each dimension
scree_plot #Dim 1 = 66.8%, Dim 2 = 15.7%
scree_plot
#Scree plot ----
scree_plot = fviz_eig(data.pca,
addlabels = TRUE,
ylim = c(0, 70)) +
geom_col(color = "#00AFBB", fill = "#00AFBB") +
theme_classic()
scree_plot
#KNN classification -----
#Use the screeplot generated % of explained variance for each dimension
scree_plot #Dim 1 = 66.8%, Dim 2 = 15.7%
# PC1-PC2 ------
#Determine the number of clusters
pca_scores <- data.frame(pca_res$x[, 1:2])
fviz_nbclust(pca_scores,
FUNcluster = kmeans,
method = "wss")
pcas = "PC1-PC2"
cluster_model <- kmeans(pca_res$x[, 1:2], centers = 3)  #Set the number of clusters
ann_vaccines_pca_matrix$cluster <- as.factor(cluster_model$cluster)
# Condition with density plot ------
pca_plot_knn_cluster = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'cluster')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.1,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
xlab("PC1 (68.2%)") +
ylab("PC2 (15.9%)") +
scale_color_manual(values = c("1" = "#8491B4FF",
"2" = "#DC0000FF",
"3" = "#4DBBD5FF",
"4" = "#00A087FF",
"5" = "#E64B35FF",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#8491B4FF",
"2" = "#DC0000FF",
"3" = "#4DBBD5FF",
"4" = "#00A087FF",
"5" = "#E64B35FF")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 2)
pca_plot_knn_cluster
# Condition with density plot ------
pca_plot_knn_cluster = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'cluster')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.1,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
xlab("PC1 (68.2%)") +
ylab("PC2 (15.9%)") +
scale_color_manual(values = c("1" = "#DC0000FF",
"2" = "#4DBBD5FF",
"3" = "#8491B4FF",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#DC0000FF",
"2" = "#4DBBD5FF",
"3" = "#8491B4FF")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 2)
pca_plot_knn_cluster
ggsave(pca_plot_knn_cluster, file = paste0(filename, pcas, "_KNN_Clustered_labels.png"), width = 10, height = 5)
# Condition with density plot ------
pca_plot_knn_cluster = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'cluster')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.1,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
xlab("PC1 (68.2%)") +
ylab("PC2 (15.9%)") +
scale_color_manual(values = c("1" = "#DC0000FF",
"2" = "#4DBBD5FF",
"3" = "#8491B4FF",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#DC0000FF",
"2" = "#4DBBD5FF",
"3" = "#8491B4FF")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 2.5)
ggsave(pca_plot_knn_cluster, file = paste0(filename, pcas, "_KNN_Clustered_labels.png"), width = 10, height = 5)
ggsave(pca_plot_knn_cluster, file = paste0(filename, pcas, "_KNN_Clustered_labels.png"), width = 10, height = 5)
# Condition with density plot ------
pca_plot_knn_cluster = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'cluster')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.1,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
xlab("PC1 (68.2%)") +
ylab("PC2 (15.9%)") +
scale_color_manual(values = c("1" = "#DC0000FF",
"2" = "#4DBBD5FF",
"3" = "#8491B4FF",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#DC0000FF",
"2" = "#4DBBD5FF",
"3" = "#8491B4FF")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 3)
ggsave(pca_plot_knn_cluster, file = paste0(filename, pcas, "_KNN_Clustered_labels.png"), width = 10, height = 5)
ggsave(pca_plot_knn_cluster, file = paste0(filename, pcas, "_KNN_Clustered_labels.png"), width = 15, height = 5)
# Condition with density plot ------
pca_plot_knn_cluster = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'cluster')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.2,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
xlab("PC1 (68.2%)") +
ylab("PC2 (15.9%)") +
scale_color_manual(values = c("1" = "#DC0000FF",
"2" = "#4DBBD5FF",
"3" = "#8491B4FF",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#DC0000FF",
"2" = "#4DBBD5FF",
"3" = "#8491B4FF")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank()) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 3)
ggsave(pca_plot_knn_cluster, file = paste0(filename, pcas, "_KNN_Clustered_labels.png"), width = 15, height = 5)
ggsave(pca_plot_knn_cluster, file = paste0(filename, pcas, "_KNN_Clustered_labels.png"), width = 1, height = 5)
ggsave(pca_plot_knn_cluster, file = paste0(filename, pcas, "_KNN_Clustered_labels.png"), width = 10, height = 5)
# Condition with density plot ------
pca_plot_knn_cluster = autoplot(pca_res,
data = ann_vaccines_pca_matrix,
colour = 'cluster')  +
stat_ellipse(aes(color = cluster, fill = cluster),
geom = "polygon",
alpha = 0.2,
linetype = 1,
size = 0.3,
type = "t") +
labs(title=paste0(filename, "_bycondition")) +
xlab("PC1 (68.2%)") +
ylab("PC2 (15.9%)") +
scale_color_manual(values = c("1" = "#DC0000FF",
"2" = "#4DBBD5FF",
"3" = "#8491B4FF",
condition_col)) +  # Ellipse line colors
scale_fill_manual(values = c("1" = "#DC0000FF",
"2" = "#4DBBD5FF",
"3" = "#8491B4FF")) +  # Cluster fill colors
theme_minimal() +
guides(col="none") +
theme(panel.grid = element_blank(),
text = element_text(color = "black")) +
geom_text_repel(aes(label = condition,
segment.colour="gray70"),
box.padding = 0.3,
size = 3)
ggsave(pca_plot_knn_cluster, file = paste0(filename, pcas, "_KNN_Clustered_labels.png"), width = 10, height = 5)
